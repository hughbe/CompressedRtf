import XCTest
@testable import CompressedRtf

final class CompressedRtfTests: XCTestCase {
    func testInvalid() {
        // Short data
        XCTAssertThrowsError(try CompressedRtf.decompress(data: []))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))
        
        // Invalid compType.
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x45, 0x4C, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00
        ]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x44, 0x4C, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00
        ]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x45, 0x4B, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00
        ]))
        XCTAssertThrowsError(try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x45, 0x4C, 0x40,
            /* crc */      0x00, 0x00, 0x00, 0x00
        ]))
        
        // Invalid size - uncompressed.
        for invalidSize in 0x00..<0x0C {
            XCTAssertThrowsError(try CompressedRtf.decompress(data: Data([
                /* size */     UInt8(invalidSize), 0x00, 0x00, 0x00,
                /* rawSize */  0x01, 0x00, 0x00, 0x00,
                /* compType */ 0x4D, 0x45, 0x4C, 0x41,
                /* crc */      0x00, 0x00, 0x00, 0x00,

                /* data */     0x41
            ])))
        }
        
        // Invalid size - compressed.
        for invalidSize in 0x00..<0x10 {
            XCTAssertThrowsError(try CompressedRtf.decompress(data: Data([
                /* size*/      UInt8(invalidSize), 0x00, 0x00, 0x00,
                /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
                /* compType */ 0x4C, 0x5A, 0x46, 0x75,
                /* crc */      0xF1, 0xC5, 0xC7, 0xA7,
                               
               /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
            ])))
        }
    }
    
    func testDecompressUncompressed() throws {
        let uncompressedData: [UInt8] = [46, 0, 0, 0, 34, 0, 0, 0, 77, 69, 76, 65, 32, 223, 18, 206, 123, 92, 114, 116, 102, 49, 92, 97, 110, 115, 105, 92, 97, 110, 115, 105, 99, 112, 103, 49, 50, 53, 50, 92, 112, 97, 114, 100, 32, 116, 101, 115, 116, 125]
        let uncompressedRtf = try CompressedRtf.decompress(data: Data(uncompressedData))
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard test}", uncompressedRtf)
        
        XCTAssertEqual("", try CompressedRtf.decompress(data: [
            /* size */     0x0C, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x45, 0x4C, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00
        ]))
        
        XCTAssertEqual("A", try CompressedRtf.decompress(data: [
            /* size */     0x0C, 0x00, 0x00, 0x00,
            /* rawSize */  0x01, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x45, 0x4C, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00,

            /* data */     0x41
        ]))
        
        // Make sure it ignores rawSize
        XCTAssertEqual("A", try CompressedRtf.decompress(data: [
            /* size */     0x0C, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x45, 0x4C, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00,

            /* data */     0x41
        ]))
        XCTAssertEqual("A", try CompressedRtf.decompress(data: [
            /* size */     0x0C, 0x00, 0x00, 0x00,
            /* rawSize */  0xFF, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x45, 0x4C, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00,

            /* data */     0x41
        ]))
        XCTAssertEqual("ABC", try CompressedRtf.decompress(data: [
            /* size */     0xFF, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4D, 0x45, 0x4C, 0x41,
            /* crc */      0x00, 0x00, 0x00, 0x00,

            /* data */     0x41, 0x42, 0x43
        ]))
    }

    
    func testDecompressCompressed() throws {
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF1, 0xC5, 0xC7, 0xA7,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        
        // Padding
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF1, 0xC5, 0xC7, 0xA7,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0,
            
            /* padding */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
        ])))
        
        // Large size
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0xFF, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF1, 0xC5, 0xC7, 0xA7,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        
        // Zero raw size
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF1, 0xC5, 0xC7, 0xA7,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        
        // Invalid CRC
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF0, 0xC5, 0xC7, 0xA7,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF1, 0xC4, 0xC7, 0xA7,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF1, 0xC5, 0xC6, 0xA7,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        XCTAssertEqual("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n", try CompressedRtf.decompress(data: Data([
            /* size*/      0x2D, 0x00, 0x00, 0x00,
            /* rawSize*/   0x2B, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0xF1, 0xC5, 0xC7, 0xA6,
                           
           /* data*/       0x03, 0x00, 0x0A, 0x00, 0x72, 0x63, 0x70, 0x67, 0x31, 0x32, 0x35, 0x42, 0x32, 0x0A, 0xF3, 0x20, 0x68, 0x65, 0x6C, 0x09, 0x00, 0x20, 0x62, 0x77, 0x05, 0xB0, 0x6C, 0x64, 0x7D, 0x0A, 0x80, 0x0F, 0xA0
        ])))
        
        // Invalid length.
        XCTAssertEqual("", try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00
        ]))
        XCTAssertEqual("A", try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00,
            
            /* data */     0x00, 0x41
        ]))
        XCTAssertEqual("AB", try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00,
            
            /* data */     0x00, 0x41, 0x42
        ]))
        XCTAssertEqual("AB", try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00,
            
            /* data */     0x00, 0x41, 0x42
        ]))
        XCTAssertEqual("", try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00,
            
            /* data */     0x01
        ]))
        XCTAssertEqual("", try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00,
            
            /* data */     0x01, 0x00
        ]))
        XCTAssertEqual("{\\", try CompressedRtf.decompress(data: [
            /* size */     0x10, 0x00, 0x00, 0x00,
            /* rawSize */  0x00, 0x00, 0x00, 0x00,
            /* compType */ 0x4C, 0x5A, 0x46, 0x75,
            /* crc */      0x00, 0x00, 0x00, 0x00,
            
            /* data */     0x01, 0x00, 0x00
        ]))
    }

    static var allTests = [
        ("testInvalid", testInvalid),
        ("testDecompressUncompressed", testDecompressUncompressed),
        ("testDecompressCompressed", testDecompressCompressed),
    ]
}
